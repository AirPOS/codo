!!!
%html
  != @JST['partials/head'](@)
  %body
    != @JST['partials/header'](@)

    #content
      %h1
        Class:
        = @classData.class.className

        - if @classData.doc?.abstract || @classData.doc?.abstract is ''
          %span.note.title Abstract

        - if @classData.doc?.deprecated || @classData.doc?.deprecated is ''
          %span.deprecated.note.title Deprecated

        - if @classData.doc?.private || @classData.doc?.private is ''
          %span.private.note.title Private

      %table.box
        %tr
          %td Defined in:
          %td= @classData.file

        - if @classData.class.parent
          %tr
            %td Inherits:
            %td
              %a{ href: "#{ @path }classes/#{ @classData.class.parent.replace(/\./g, '/') }.html"}= @classData.class.parent

        - if @classData.doc?.extends
          %tr
            %td Extends:
            %td
              - for extendMixin in @classData.doc.extends
                - if extendMixin is @underscore.last @classData.doc.extends
                  %a{ href: "#{ @path }mixins/#{ extendMixin.replace(/\./g, '/') }.html"}= extendMixin
                - else
                  != succeed ',', ->
                    %a{ href: "#{ @path }mixins/#{ extendMixin.replace(/\./g, '/') }.html"}= extendMixin

        - if @classData.doc?.includes
          %tr
            %td Includes:
            %td
              - for includeMixin in @classData.doc.includes
                - if includeMixin is @underscore.last @classData.doc.includes
                  %a{ href: "#{ @path }mixins/#{ includeMixin.replace(/\./g, '/') }.html"}= includeMixin
                - else
                  != succeed ',', ->
                    %a{ href: "#{ @path }mixins/#{ includeMixin.replace(/\./g, '/') }.html"}= includeMixin

      - if @classData.doc?.comment
        %h2 Overview

        != @JST['partials/doc']({ doc: @classData.doc, type: 'class', path: @path, referencer: @referencer })

      - if @subClasses.length isnt 0
        %h2 Direct Known Subclasses
        %p.children
          - for child in @subClasses
            - if child is @underscore.last @subClasses
              %a{ href: "#{ @path }classes/#{ child.replace(/\./g, '/') }.html"}= child
            - else
              != succeed ',', ->
                %a{ href: "#{ @path }classes/#{ child.replace(/\./g, '/') }.html"}= child

      - if @constants.length isnt 0
        %h2 Constant Summary

        %dl.constants
          - for constant in @constants
            %dt{ id: "#{ constant.name }-constant" }
              = constant.name
              \=
              != @JST['partials/doc']({ doc: constant.doc, type: 'constant', path: @path, referencer: @referencer })
            %dd
              %pre
                %code.coffee!= constant.value

      - for parent, constants of @inheritedConstants
        - if @constants.length is 0
          %h2 Constant Summary

        %h3.inherited
          Constants inherited from
          %a{ href: "#{ @path }classes/#{ parent.replace(/\./g, '/') }.html"}= parent
        %p.inherited
          - for constant in constants
            - if constant is @underscore.last constants
              %a{ href: "#{ @path }classes/#{ parent.replace(/\./g, '/') }.html##{ constant.getName() }-constant"}= constant.getName()
            - else
              != succeed ',', ->
                %a{ href: "#{ @path }classes/#{ parent.replace(/\./g, '/') }.html##{ constant.getName() }-constant"}= constant.getName()

      - if @classMethods.length isnt 0
        %h2 Class Method Summary

        != @JST['partials/method_summary']({ methods: @classMethods })

      - if @instanceMethods.length isnt 0
        %h2 Instance Method Summary

        != @JST['partials/method_summary']({ methods: @instanceMethods })

      - for parent, methods of @inheritedMethods
        - if @classMethods.length is 0 && @instanceMethods.length is 0
          %h2 Method Summary

        %h3.inherited
          Methods inherited from
          %a{ href: "#{ @path }classes/#{ parent.replace(/\./g, '/') }.html"}= parent
        %p.inherited
          - for method in methods
            - if method is @underscore.last methods
              %a{ href: "#{ @path }classes/#{ parent.replace(/\./g, '/') }.html##{ method.getName() }-#{ method.getType() }"}= method.getShortSignature()
            - else
              != succeed ',', ->
                %a{ href: "#{ @path }classes/#{ parent.replace(/\./g, '/') }.html##{ method.getName() }-#{ method.getType() }"}= method.getShortSignature()

      - if @classMethods.length isnt 0
        %h2 Class Method Details

        != @JST['partials/method_list']({ methods: @classMethods, parent: @ })

      - constructor = @underscore.filter @instanceMethods, (m) -> m.name is 'constructor'
      - if constructor.length isnt 0
        %h2 Constructor Details

        != @JST['partials/method_list']({ methods: constructor, parent: @ })

      - instanceMethods = @underscore.filter @instanceMethods, (m) -> m.name isnt 'constructor'
      - if instanceMethods.length isnt 0
        %h2 Instance Method Details

        != @JST['partials/method_list']({ methods: instanceMethods, parent: @ })

    != @JST['partials/footer'](@)
